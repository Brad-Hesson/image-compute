use std::{env, fmt::Write};

use wgsl_to_wgpu::{MatrixVectorTypes, WriteOptions, create_shader_module};

fn main() -> Result<(), Box<dyn std::error::Error>> {
    for name in ["unary", "arity1", "arity2", "plane_fit"] {
        println!("cargo:rerun-if-changed=shaders/{name}.wgsl");
        let wgsl_file = format!("shaders/{name}.wgsl");
        let wgsl_source = std::fs::read_to_string(&wgsl_file)?;

        // Generate the Rust bindings and write to a file.
        let mut text = String::new();
        writeln!(&mut text, "// File automatically generated by build.rs.")?;
        writeln!(&mut text, "// Changes made to this file will not be saved.")?;

        text += &create_shader_module(
            &wgsl_source,
            &format!("{}/shaders/{name}.wgsl", env::var("CARGO_MANIFEST_DIR")?),
            WriteOptions {
                derive_bytemuck_vertex: true,
                derive_encase_host_shareable: true,
                matrix_vector_types: MatrixVectorTypes::Glam,
                rustfmt: true,
                validate: Some(Default::default()),
                derive_bytemuck_host_shareable: true,
                ..Default::default()
            },
        )
        .inspect_err(|error| error.emit_to_stderr_with_path(&wgsl_source, &wgsl_file))
        .map_err(|_| "Failed to validate shader")?;

        std::fs::write(
            format!("{}/{name}.rs", env::var("OUT_DIR")?),
            text.as_bytes(),
        )?;
    }

    Ok(())
}

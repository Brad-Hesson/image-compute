use std::{env, fmt::Write};

use wgsl_to_wgpu::{MatrixVectorTypes, WriteOptions, create_shader_module};

fn main() -> Result<(), Box<dyn std::error::Error>> {
    generate_wgsl_bindings("plane_fit", "quad_fit", |_| {})?;
    generate_wgsl_bindings("plane_fit", "plane_fit", |src| {
        *src = src
            .lines()
            .filter(|line| !line.contains("$quad"))
            .fold(String::new(), |a, b| a + b + "\n");
    })?;
    generate_wgsl_bindings("plane_fit", "plane_fit_32", |src| {
        *src = src
            .lines()
            .map(|s| s.replace("f64", "f32"))
            .filter(|line| !line.contains("$quad"))
            .fold(String::new(), |a, b| a + &b + "\n");
    })?;
    Ok(())
}

fn generate_wgsl_bindings(
    src: &str,
    output: &str,
    preprocess: impl FnOnce(&mut String),
) -> Result<(), Box<dyn std::error::Error>> {
    println!("cargo:rerun-if-changed=shaders/{src}.wgsl");
    let wgsl_file = format!("shaders/{src}.wgsl");
    let mut wgsl_source = std::fs::read_to_string(&wgsl_file)?;
    preprocess(&mut wgsl_source);

    std::fs::write(
        format!("{}/{output}.wgsl", env::var("OUT_DIR")?),
        wgsl_source.as_bytes(),
    )?;

    // Generate the Rust bindings and write to a file.
    let mut text = String::new();
    writeln!(&mut text, "// File automatically generated by build.rs.")?;
    writeln!(&mut text, "// Changes made to this file will not be saved.")?;

    text += &create_shader_module(
        &wgsl_source,
        &format!("{}/{output}.wgsl", env::var("OUT_DIR")?),
        WriteOptions {
            derive_bytemuck_vertex: true,
            derive_encase_host_shareable: true,
            matrix_vector_types: MatrixVectorTypes::Glam,
            rustfmt: true,
            validate: Some(Default::default()),
            derive_bytemuck_host_shareable: true,
            ..Default::default()
        },
    )
    .inspect_err(|error| error.emit_to_stderr_with_path(&wgsl_source, &wgsl_file))
    .map_err(|_| "Failed to validate shader")?;

    std::fs::write(
        format!("{}/{output}.rs", env::var("OUT_DIR")?),
        text.as_bytes(),
    )?;
    Ok(())
}
